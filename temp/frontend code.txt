intex.html:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Workflow Builder</title>
</head>
<body>
  <div id="root"></div>
</body>
</html>

App.jsx:
import React, { useState, useRef, useCallback, useEffect } from 'react';
import ReactFlow, { ReactFlowProvider } from 'reactflow';
import 'reactflow/dist/style.css';
import LandingPage from './components/LandingPage';
import GenAIStackPage from './components/GenAIStackPage';
import './styles.css';

function App() {
  const [currentPage, setCurrentPage] = useState('landing'); // Default to landing page

  const handleGetStarted = () => {
    setCurrentPage('my-stacks'); // Navigate to My Stacks page
  };

  const handleNewStack = () => {
    setCurrentPage('genai-stack'); // Navigate to GenAI Stack page
  };

  const pages = {
    landing: <LandingPage onGetStarted={handleGetStarted} />,
    'my-stacks': (
      <div className="my-stacks-page" style={{ height: '100vh', width: '100vw', overflow: 'hidden' }}>
        <header style={{ padding: '10px', background: '#f5f5f5', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <h2 style={{ margin: 0 }}>My Stacks</h2>
          <button onClick={handleNewStack} style={{ padding: '5px 10px', background: '#28a745', color: 'white', border: 'none', borderRadius: '4px' }}>
            + New Stack
          </button>
        </header>
        <div style={{ padding: '20px', textAlign: 'center' }}>
          <button
            onClick={handleNewStack}
            style={{
              padding: '10px 20px',
              background: '#28a745',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
            }}
          >
            Create New Stack
          </button>
          <p style={{ marginTop: '10px', color: '#666' }}>Start building your generative AI apps with our essential tools and frameworks</p>
        </div>
      </div>
    ),
    'genai-stack': <GenAIStackPage />,
  };

  return (
    <div className="app" style={{ height: '100vh', width: '100vw', display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>
      <div className="main-content" style={{ display: 'flex', flexGrow: 1, overflow: 'hidden' }}>
        <div className="workspace" style={{ flexGrow: 1, position: 'relative', overflow: 'hidden' }}>
          {pages[currentPage] || pages['landing']}
        </div>
      </div>
    </div>
  );
}

export default function WrappedApp() {
  return (
    <ReactFlowProvider>
      <App />
    </ReactFlowProvider>
  );
}

index.js:
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

styles.css:
.app {
  display: flex;
  flex-direction: column;
  height: 100vh;
  width: 100vw;
  overflow: hidden;
  font-family: Arial, sans-serif;
}

.main-content {
  display: flex;
  flex-grow: 1;
  overflow: hidden;
}

.workspace {
  flex-grow: 1;
  position: relative;
  overflow: hidden;
}

/* Landing Page Styles */
.landing-page {
  width: 100%;
  height: 100%;
  padding-left: 0;
  background: #1a2a44;
  color: #fff;
  overflow: hidden;
}

/* Other existing styles remain unchanged */

GenAIStackPage.css:
.genai-stack-page {
  display: flex;
  height: 100vh;
  width: 100vw;
  overflow: hidden;
  background: #f5f5f5;
  font-family: Arial, sans-serif;
}

.sidebar {
  width: 200px;
  background: #e0e0e0;
  padding: 10px;
  display: flex;
  flex-direction: column;
  gap: 10px;
  overflow: hidden;
}

.workspace {
  flex-grow: 1;
  position: relative;
  overflow: hidden;
  background: #fff;
}

.create-stack-btn {
  position: absolute;
  bottom: 10px;
  right: 10px;
  padding: 8px 16px;
  background: #1a73e8;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  overflow: hidden;
}

.create-stack-btn:hover {
  background: #1557b0;
}

GenAiStackPage.jsx:
import React, { useState, useRef, useCallback } from 'react';
import ReactFlow, { Controls, Background, applyNodeChanges, applyEdgeChanges, addEdge, ReactFlowProvider } from 'reactflow';
import 'reactflow/dist/style.css';
import UserQueryComponent from './UserQueryComponent';
import KnowledgeBaseComponent from './KnowledgeBaseComponent';
import LLMEngineComponent from './LLMEngineComponent';
import OutputComponent from './OutputComponent';
import './GenAIStackPage.css';

const initialNodes = [{ id: '1', type: 'userQuery', position: { x: 0, y: 0 }, data: { label: 'User Query' } }];
const initialEdges = [];

const nodeTypes = {
  userQuery: UserQueryComponent,
  knowledgeBase: KnowledgeBaseComponent,
  llmEngine: LLMEngineComponent,
  output: OutputComponent,
};

const GenAIStackPage = () => {
  const [nodes, setNodes] = useState(initialNodes);
  const [edges, setEdges] = useState(initialEdges);
  const [chatOpen, setChatOpen] = useState(false);
  const [chatMessages, setChatMessages] = useState([]);
  const reactFlowWrapper = useRef(null);
  const [reactFlowInstance, setReactFlowInstance] = useState(null);

  const onNodesChange = useCallback((changes) => setNodes((nds) => applyNodeChanges(changes, nds)), []);
  const onEdgesChange = useCallback((changes) => setEdges((eds) => applyEdgeChanges(changes, eds)), []);
  const onConnect = useCallback((params) => setEdges((eds) => addEdge(params, eds)), []);
  const onDragOver = useCallback((event) => event.preventDefault(), []);
  const onDrop = useCallback(
    (event) => {
      event.preventDefault();
      if (!reactFlowInstance) return;
      const rect = reactFlowWrapper.current.getBoundingClientRect();
      const position = reactFlowInstance.screenToFlowPosition({
        x: event.clientX - rect.left,
        y: event.clientY - rect.top,
      });
      const type = event.dataTransfer.getData('application/reactflow');
      if (typeof type === 'string' && type) {
        const newNode = { id: `${nodes.length + 1}`, type, position, data: { label: type.replace(/([A-Z])/g, ' $1').trim() } };
        setNodes((nds) => [...nds, newNode]);
      }
    },
    [reactFlowInstance, nodes.length]
  );

  const handleCreateStack = () => {
    if (nodes.length > 1 && edges.length > 0) {
      setChatOpen(true);
    }
  };

  const handleChatSubmit = async (message) => {
    const response = await fetch('http://localhost:8000/query', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ query: message, workflow: { nodes, edges } }),
    });
    const data = await response.json();
    setChatMessages((msgs) => [...msgs, { text: message, from: 'user' }, { text: data.response, from: 'bot' }]);
  };

  return (
    <div className="genai-stack-page" ref={reactFlowWrapper} style={{ height: '100vh', width: '100vw', display: 'flex', overflow: 'hidden' }}>
      <nav className="sidebar" style={{ overflow: 'hidden' }}>
        <h3>Component Library</h3>
        <div draggable onDragStart={(e) => e.dataTransfer.setData('application/reactflow', 'userQuery')}>User Query</div>
        <div draggable onDragStart={(e) => e.dataTransfer.setData('application/reactflow', 'knowledgeBase')}>Knowledge Base</div>
        <div draggable onDragStart={(e) => e.dataTransfer.setData('application/reactflow', 'llmEngine')}>LLM Engine</div>
        <div draggable onDragStart={(e) => e.dataTransfer.setData('application/reactflow', 'output')}>Output</div>
      </nav>
      <div className="workspace" style={{ flexGrow: 1, overflow: 'hidden' }}>
        <ReactFlow
          nodes={nodes}
          edges={edges}
          onNodesChange={onNodesChange}
          onEdgesChange={onEdgesChange}
          onConnect={onConnect}
          onDrop={onDrop}
          onDragOver={onDragOver}
          nodeTypes={nodeTypes}
          onInit={setReactFlowInstance}
          fitView
          style={{ height: '100%', width: '100%' }}
        >
          <Controls />
          <Background />
        </ReactFlow>
        <button onClick={handleCreateStack} className="create-stack-btn" style={{ overflow: 'hidden' }}>Create New Stack</button>
        {chatOpen && <OutputComponent messages={chatMessages} onSubmit={handleChatSubmit} />}
      </div>
    </div>
  );
};

export default function WrappedGenAIStackPage() {
  return (
    <ReactFlowProvider>
      <GenAIStackPage />
    </ReactFlowProvider>
  );
}

KnowledgeBaseComponent.jsx:
import React from 'react';

const KnowledgeBaseComponent = ({ data }) => {
  return (
    <div style={{ padding: 10, border: '1px solid #ccc', borderRadius: 4 }}>
      <h4>{data.label}</h4>
      <input type="file" />
    </div>
  );
};

export default KnowledgeBaseComponent;

LandingPage.css:
.landing-page {
  font-family: Arial, sans-serif;
  color: #fff;
  background: #1a2a44;
}

header {
  display: flex;
  justify-content: space-between;
  padding: 20px;
  background: #0d1b2a;
}

.logo {
  font-size: 20px;
}

.logo span {
  font-size: 12px;
  color: #a9b7d0;
}

nav a {
  margin: 0 15px;
  color: #a9b7d0;
  text-decoration: none;
}

nav .contact-btn {
  background: #2ecc71;
  padding: 5px 15px;
  border-radius: 5px;
}

.hero {
  text-align: center;
  padding: 50px 20px;
}

.hero h1 {
  font-size: 48px;
  margin: 0;
}

.hero h2 {
  font-size: 24px;
  color: #f1c40f;
}

.hero p {
  font-size: 18px;
  color: #a9b7d0;
}

.cta-buttons {
  margin-top: 20px;
}

.cta-buttons button {
  padding: 10px 20px;
  margin: 0 10px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.get-started {
  background: #fff;
  color: #1a2a44;
}

.book-demo {
  background: #34495e;
  color: #fff;
}

.benefits {
  display: flex;
  justify-content: center;
  gap: 20px;
  padding: 20px;
  background: #0d1b2a;
}

.benefit-card {
  text-align: center;
  padding: 20px;
  background: #1b263b;
  border-radius: 10px;
}

.benefit-card h3 {
  font-size: 24px;
  margin: 0;
}

.benefit-card p {
  font-size: 14px;
  color: #a9b7d0;
}

footer {
  text-align: center;
  padding: 20px;
  background: #0d1b2a;
  font-size: 14px;
  color: #a9b7d0;
}

LandingPage.jsx:
import React from 'react';
import './LandingPage.css';

const LandingPage = ({ onGetStarted }) => {
  return (
    <div className="landing-page">
      <header>
        <div className="logo">ai planet <span>formerly DPii</span></div>
        <nav>
          <a href="#products">Products</a>
          <a href="#models">Models</a>
          <a href="#solutions">Solutions</a>
          <a href="#community">Community</a>
        </nav>
      </header>
      <section className="hero">
        <h1>Deploy GenAI Apps</h1>
        <h2>in minutes, not months.</h2>
        <p>Integrate reliable, private and secure GenAI solutions within your enterprise environment</p>
        <div className="cta-buttons">
          <button className="get-started" onClick={onGetStarted}>Get Started</button>
          <button className="book-demo">Book Demo</button>
        </div>
      </section>
      <section className="benefits">
        <div className="benefit-card">
          <h3>20x</h3>
          <p>Faster time to market</p>
        </div>
        <div className="benefit-card">
          <h3>up to 30x</h3>
          <p>Infra Cost Savings</p>
        </div>
        <div className="benefit-card">
          <h3>10x</h3>
          <p>Productivity Gains</p>
        </div>
      </section>
      <footer>
        <p>Trusted by leading organizations and 300K+ global community</p>
      </footer>
    </div>
  );
};

export default LandingPage;

LLMEngineComponent.jsx:
import React from 'react';

const LLMEngineComponent = ({ data }) => {
  return (
    <div style={{ padding: 10, border: '1px solid #ccc', borderRadius: 4 }}>
      <h4>{data.label}</h4>
      <select>
        <option>OpenAI GPT</option>
        <option>Gemini</option>
      </select>
    </div>
  );
};

export default LLMEngineComponent;

OutputComponent.jsx:
import React from 'react';

const OutputComponent = ({ messages, onSubmit }) => {
  const [input, setInput] = React.useState('');
  return (
    <div className="chat-interface">
      {messages.map((msg, index) => (
        <p key={index} className={msg.from}>{msg.text}</p>
      ))}
      <form onSubmit={(e) => { e.preventDefault(); onSubmit(input); setInput(''); }}>
        <input value={input} onChange={(e) => setInput(e.target.value)} />
        <button type="submit">Send</button>
      </form>
    </div>
  );
};

export default OutputComponent;

UserQueryComponent.jsx:
import React from 'react';

const UserQueryComponent = ({ data }) => {
  return (
    <div style={{ padding: 10, border: '1px solid #ccc', borderRadius: 4 }}>
      <h4>{data.label}</h4>
      <input placeholder="Enter query..." />
    </div>
  );
};

export default UserQueryComponent;

Dockerfile:
FROM node:18
WORKDIR /app
COPY package.json .
RUN npm install
COPY . .
RUN npm run build
CMD ["npx", "serve", "-s", "build", "-l", "3000"]

package.json:
{
    "name": "workflow-builder",
    "version": "1.0.0",
    "dependencies": {
      "react": "^18.2.0",
      "react-dom": "^18.2.0",
      "reactflow": "^11.7.0",
      "react-scripts": "^5.0.1"
    },
    "scripts": {
      "start": "react-scripts start",
      "build": "react-scripts build",
      "test": "react-scripts test",
      "eject": "react-scripts eject"
    }
  }


docker-compose.yaml:
version: '3.8'
services:
  backend:
    build:
      context: ./backend
    ports:
      - "8000:8000"
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - app-network
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network
  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=dbname
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
volumes:
  postgres_data:

prometheus.yml:
global:
       scrape_interval: 15s
      scrape_configs:
        - job_name: 'backend'
          static_configs:
            - targets: ['backend:8000']